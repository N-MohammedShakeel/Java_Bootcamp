Java Overview
Java is a high-level, object-oriented, platform-independent programming language developed by Sun Microsystems (now owned by Oracle). It follows Write Once, Run Anywhere (WORA) due to its JVM (Java Virtual Machine).

Key Features of Java
-Object-Oriented – Follows OOP principles (Class, Object, Inheritance, Polymorphism, etc.).
-Platform-Independent – Runs on any OS with JVM.
-Secure – Has built-in security features like bytecode verification and sandboxing.
-Robust – Strong memory management, exception handling, and garbage collection.
-Multi-threaded – Supports concurrent execution of tasks.
-High Performance – Uses JIT (Just-In-Time) compiler for faster execution.
-Distributed – Supports networking and remote method invocation (RMI).
-Simple & Scalable – Easy to learn, maintain, and scalable for large applications.


Essential Java Terminologies You Need to Know
Before learning Java, one must be familiar with these common terms of Java.

1. Java Virtual Machine(JVM)
The JVM is an integral part of the Java platform, responsible for executing Java bytecode. It ensures that the output of Java programs is consistent across different platforms.

Writing a program is done by a java programmer like you and me.
The compilation is done by the JAVAC compiler which is a primary Java compiler included in the Java development kit (JDK). It takes the Java program as input and generates bytecode as output.
In the Running phase of a program, JVM executes the bytecode generated by the compiler.
The Java Virtual Machine (JVM) is designed to run the bytecode generated by the Java compiler. Each operating system has its own version of the JVM, but all JVMs follow the same rules and standards. This means Java programs can run the same way on any device with a JVM, regardless of the operating system. This is why Java is called a platform-independent language.

2. Bytecode
Bytecode is the intermediate representation of Java code, generated by the Java compiler. It is platform-independent and can be executed by the JVM.

3. Java Development Kit(JDK)
While we were using the term JDK when we learn about bytecode and JVM. So, as the name suggests, it is a complete Java development kit that includes everything including compiler, Java Runtime Environment (JRE), Java Debuggers, Java Docs, etc. For the program to execute in java, we need to install JDK on our computer in order to create, compile and run the java program.

4. Java Runtime Environment (JRE)
JDK includes JRE. JRE installation on our computers allows the java program to run, however, we cannot compile it. JRE includes a browser, JVM, applet support, and plugins. For running the java program, a computer needs JRE.

5. Garbage Collector
In Java, programmers can’t delete the objects. To delete or recollect that memory JVM has a program called Garbage Collector. Garbage Collectors can recollect the objects that are not referenced. So Java makes the life of a programmer easy by handling memory management. However, programmers should be careful about their code whether they are using objects that have been used for a long time. Because Garbage cannot recover the memory of objects being referenced.

6. ClassPath
The Classpath is the file path where the java runtime and Java compiler look for .class files to load. By default, JDK provides many libraries. If you want to include external libraries they should be added to the classpath.

Basically everything in java is represented in Class as an object including the main function.

Advantages of Java
-Platform independent: Java code can run on any platform that has a Java Virtual Machine (JVM) installed, which means that applications can be written once and run on any device.
-Object-Oriented: Java is an object-oriented programming language, which means that it follows the principles of encapsulation, inheritance, and polymorphism.
-Security: Java has built-in security features that make it a secure platform for developing applications, such as automatic memory management and type checking.
-Large community: Java has a large and active community of developers, which means that there is a lot of support available for learning and using the language.
-Enterprise-level applications: Java is widely used for developing enterprise-level applications, such as web applications, e-commerce systems, and database systems.
Disadvantages of Java
-Performance: Java can be slower compared to other programming languages, such as C++, due to its use of a virtual machine and automatic memory management.
-Memory management: Java’s automatic memory management can lead to slower performance and increased memory usage, which can be a drawback for some applications.


Conclusion
Java is a powerful and versatile programming language that’s great for beginners and experienced developers alike.
By learning the basics, like what classes, objects, and methods are, you can start creating your own programs and see how Java can be used in real-world applications.
Whether you’re interested in building games, mobile apps, or websites, Java provides a solid foundation to bring your ideas to life. Remember, the more you practice, the better you’ll get. Keep exploring, and soon you’ll be writing your own Java programs with confidence!